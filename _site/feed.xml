<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-02T00:35:57+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">작은 걸음</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>pwsusc10</name></author><entry><title type="html">http - 3</title><link href="http://localhost:4000/til/2023/05/27/http3.html" rel="alternate" type="text/html" title="http - 3" /><published>2023-05-27T00:00:00+09:00</published><updated>2023-05-27T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/05/27/http3</id><content type="html" xml:base="http://localhost:4000/til/2023/05/27/http3.html"><![CDATA[<h2 id="쿠키-세션-토큰을-왜-쓰는가">쿠키, 세션, 토큰을 왜 쓰는가?</h2>

<p>http는 stateless protocol이다. 즉 state를 저장하지 않는다는 것이다. 그렇다면 사용자가 로그인 되었다는 것과 사용자의 정보를 검색하는 등의 요청을 수행할 수 있을까? 바로 쿠키, 세션, 토큰을 이용해서 가능하다!</p>

<h2 id="브라우저에-저장되는-정보---쿠키">브라우저에 저장되는 정보 - 쿠키</h2>

<p>쿠키는 크롬이나 사파리 같은 브라우저에 저장되는 작은 텍스트 조각입니다. 브라우저는 사용자의 컴퓨터에 설치된 소프트웨어이므로 쿠키는 사용자가 갖고 있는 정보라고 할 수 있습니다. 사용자는 브라우저의 설정 화면이나 개발자 도구에서 쿠키를 확인하고 수정, 삭제할 수 있습니다. 다만 쿠키는 당사자뿐만 아니라 제 3자가 조회하는 것도 가능하기 때문에 개인 정보를 담은 내용이나 보안상 민감한 정보를 저장하는 데에는 적합하지 않습니다. 따라서 혹여 남에게 탈취되거나 사용자에 의해 조작되어도 크게 문제되지 않을 정보를 브라우저에 저장함으로써 웹사이트 이용을 편리하게 해 주는 것이 쿠키입니다. 예를 들면 자주 보는 웹툰 목록이나 웹 페이지의 다크 모드 설정 여부 등과 같은 간단한 정보가 이에 해당합니다.</p>

<h2 id="서버가-나를-알아보는-방법---세션">서버가 나를 알아보는 방법 - 세션</h2>

<p>사용자의 로그인 상태를 유지하기 위해 쿠키에 아이디와 비밀번호를 담아 두고 있다고 생각해봅시다. 쿠키는 브라우저에 저장되는 정보이므로 공용 컴퓨터에서 로그인을 할 경우 사용자의 개인정보가 위험할 수 있습니다.
따라서 사용자가 사이트에 한 번 로그인하면 유효기간이 끝날 때까지 더 이상 아이디와 비밀번호를 입력하지 않아도 되도록 사용자가 이미 서버로부터 인증받았음을 증명해 주는 session이라는 증서가 필요합니다. 사용자가 서버에 올바른 아이디와 비밀번호로 로그인에 성공하면 서버는 session 아이디라는 데이터를 만듭니다. 보통은 ‘2sd98dbawix4’와 같은 식으로 알파벳과 숫자가 혼합된 형식을 갖고 있습니다. 서버는 영화관에서 티켓을 보관용 부분만 찢어 건네주듯 세션 아이디를 사용자에게 전달하고, 메모리에 아이디 사본을 어떤 사용자의 것인지 적어서 보관합니다.<br />
사용자는 서버로부터 받은 세션 아이디를 쿠키로 저장한 다음 앞으로의 모든 요청에 함께 전달합니다. 친구 목록을 볼 때, 댓글을 작성하거나 삭제할 때, 구매한 상품 내역을 볼 때도 서버에게 세션 아이디를 적은 편지를 보냅니다.</p>

<p>서버는 사용자에게서 친구 목록을 보겠다는 요청을 받으면 그 편지에 세션 아이디가 적혀있는지를 확인합니다. 아이디가 있다면 서버가 보관하고 있는 세션 아이디 중에 동일한 정보가 있는지 찾아보고 그것이 누구의 계정인지도 알아내죠. 그렇게 편지를 보낸 사람이 누구인지 파악한 다음 해당 사용자의 친구 목록을 보내주는 것입니다.</p>

<p>session은 서버에 인증 정보와 session ID를 저장하고 있기 때문에 사용자가 수백, 수천으로 늘어난다면 해당 유저의 정보를 찾고 데이터 매칭에 오랜 시간이 걸리면서 서버에 부하가 가해질 것입니다.</p>

<h2 id="또-다른-로그인-유지-방식---토큰">또 다른 로그인 유지 방식 - 토큰</h2>

<p>메모리 공간을 많이 차지하는 세션 방식의 대안으로 로그인한 사용자에게 세션 아이디 대신 “token”을 발급해 주는 것이다. 이러한 token은 암호화가 되어 있어 서버만이 유효한 토큰을 발행 및 확인할 수 있다. 토큰을 받아간 사용자는 이를 쿠키로 저장해두고 필요할 때마다 제시하면 서버가 토큰이 유효한 토큰인지 아닌지 확인하는 방식이다.<br />
더이상 서버에 사용자의 정보 및 ID를 저장할 필요가 없기 때문에 서버 부하를 줄일 수 있다. 토큰 방식에도 한계가 있다. 여러 기기에서의 로그인을 제한하기 위해 필요한 때에 로그인되어 있는 사용자를 서버가 강제로 로그아웃을 시킬 수 있어야한다. 하지만 토큰 방식에서는 이것이 불가능하다. 한 번 발행된 토큰은 유효기간이 끝나기 전까지 따로 통제할 수 없기 때문에 세션에 비해 토큰 정보를 탈취 당할 가능성이 높다. 물론 토큰의 만료기간을 짧게 지정해 피해를 줄일 수 있다.</p>

<ul>
  <li>Authentication: 로그인 과정(등록된 유저? &amp;&amp; 아이디와 패스워드가 일치?)</li>
  <li>Authorization: 등록된 유저의 권한(permission)을 설정해주는 과정(각 서비스별 read/write/delete 가능여부 설정)</li>
</ul>

<h2 id="참고">참고</h2>

<p>블로그 - <a href="https://velog.io/@jung5318/%EC%BF%A0%ED%82%A4-%EC%84%B8%EC%85%98-%ED%86%A0%ED%81%B0%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90">쿠키, 세션, 토큰의 차이점</a><br />
블로그 - <a href="https://hongong.hanbit.co.kr/%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC-%EC%BF%A0%ED%82%A4-%EC%84%B8%EC%85%98-%ED%86%A0%ED%81%B0-%EC%BA%90%EC%8B%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-cdn/">데이터를 저장하는 5가지 개념</a></p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="HTTP" /><summary type="html"><![CDATA[쿠키, 세션, 토큰을 왜 쓰는가?]]></summary></entry><entry><title type="html">http - 2</title><link href="http://localhost:4000/til/2023/05/24/http2.html" rel="alternate" type="text/html" title="http - 2" /><published>2023-05-24T00:00:00+09:00</published><updated>2023-05-24T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/05/24/http2</id><content type="html" xml:base="http://localhost:4000/til/2023/05/24/http2.html"><![CDATA[<h2 id="url">URL?</h2>

<p>URL : Uniform Resource Locator<br />
서버에 어떤 resource를 원하는 지. 특정 resource의 경로<br />
https://www.server.com/index.html =&gt; protocol + hostname + port(website경우 대부분 생략가능) + path + query</p>

<h2 id="request-method">Request Method</h2>

<ul>
  <li>GET : get</li>
  <li>POST : create</li>
  <li>PUT : replace(update)</li>
  <li>DELETE : delete</li>
  <li>PATCH : replace partially</li>
  <li>HEAD : get without body</li>
  <li>OPTIONS : all supported methods for URL</li>
  <li>TRACE : echoes the received request</li>
</ul>

<p>server의 resource를 읽기만 할 때 : GET, HEAD, OPTIONS, TRACE<br />
server의 resource를 변경할 때 : POST, POST, DELETE, PATCH</p>

<h3 id="detail">detail</h3>

<p>GET method</p>

<p><img width="773" alt="스크린샷 2023-06-01 오후 3 25 06" src="https://github.com/pwsusc10/pwsusc10.github.io/assets/101408068/450da09b-83bd-4bb5-9058-eee3fd055182" />
Safe : GET method는 서버의 state를 변경하지 않기 때문에 safe하다.<br />
Idempotent : 동일한 요청을 한 번 보내는 것과 여러 번 연속으로 보내는 것이 같은 효과를 지니고, 서버의 state도 동일하기 때문에 idempotent하다.</p>

<p>PUT method
<img width="773" alt="스크린샷 2023-06-01 오후 3 31 51" src="https://github.com/pwsusc10/pwsusc10.github.io/assets/101408068/57614c47-f971-4a45-be19-5a00bd207642" />
Safe : PUT method는 서버의 state를 변경하기에 safe하지 않다.
Idempotent : PUT method는 해당 URL의 데이터를 전체적으로 update하기 때문에 idempotent하다.</p>

<p>PATCH method<br />
<img width="773" alt="스크린샷 2023-06-01 오후 3 33 13" src="https://github.com/pwsusc10/pwsusc10.github.io/assets/101408068/6855a009-d38a-4547-a462-d309e51db66d" />
Safe : PATCH method는 서버의 state를 변경하기에 safe하지 않다.
Idempotent : PATCH method는 해당 URL의 데이터를 부분적으로 update하기 때문에 idempotent하지 않다.</p>

<h2 id="참고">참고</h2>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">MDN</a></p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="HTTP" /><summary type="html"><![CDATA[URL?]]></summary></entry><entry><title type="html">http - 1</title><link href="http://localhost:4000/til/2023/05/23/http1.html" rel="alternate" type="text/html" title="http - 1" /><published>2023-05-23T00:00:00+09:00</published><updated>2023-05-23T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/05/23/http1</id><content type="html" xml:base="http://localhost:4000/til/2023/05/23/http1.html"><![CDATA[<h2 id="http-https">http? https?</h2>

<h3 id="http">http</h3>

<p>http란 Hypertext Transfer Protocol으로 server와 client간의 request와 response로 이루어진 protocol이라고 할 수 있다.<br />
client와 server간에 데이터를 주고 받을 때 암호화처리가 되어있지 않은 텍스트 형태로 전송한다. 그 데이터를 누군가 가로채면 읽을 수 있어 보안이 낮다.</p>

<h3 id="https">https</h3>

<p>https란 Hypertext Transfer Secure Protocol로 http에서 데이터를 주고 받을 때 암호화처리 되지 않은 것을 SSL, TLS와 같은 암호화된 방식으로 주고 받는 protocol이다.</p>

<ul>
  <li>SSL : SSL(Secure Scokets Layer)은 암호화 기반 인터넷 보안 프로토콜이다. 전달되는 모든 데이터를 암호화하고 특정한 유형의 사이버 공격도 차단한다. SSL은 1996년 SSL 3.0 이후 업데이트되지 않았으며, 앞으로 사라지게 될 것으로 여기지고 있다. 또한 알려진 취약성이 여러가지 있으며 보안 전문가들은 SSL 사용 중단을 권장한다고 한다.</li>
  <li>TLS : TLS 는 SSL의 업데이트 버전으로 SSL의 최종버전인 3.0과 TLS의 최초버전의 차이는 크지않다. TLS는 SSL의 업데이트 버전이며 명칭만 다르다고 볼 수 있다.</li>
</ul>

<h3 id="연도별-http-https">연도별 http, https</h3>

<p>1989년 - HTTP 등장<br />
1994년 - HTPPS 등장<br />
1997년 - HTTP v1 등장 - http, https 둘다 지원 / text-base, header부분이 압축되어 있지 않아 사이즈가 크다, 한 번에 하나의 파일만 전송. =&gt; 비효율적이다.<br />
2015년 - HTTP v2 등장 - https를 지원 / binary-base =&gt; secure, header 부분 압축, multiplexing =&gt; 효율적이며 안전하다.<br />
2019년 - HTTP v3 등장 - https를 지원 / TCP 통신을 UDP 통신으로.</p>

<h2 id="http-status-codes">HTTP Status Codes</h2>

<h3 id="status-codes란">Status Codes란?</h3>

<p>server에서 client에게 requset에 대한 reponse를 보낼 때 status code를 함께 보낸다. status code는 세자리 숫자로 이루어져 있으며 숫자로 server에서 request를 어떻게 처리했는 지, 처리 결과에 대한 내용을 내포하고 있다. status code에는 5가지의 종류가 있다.</p>

<ul>
  <li>1xx : informational
    <ul>
      <li>100 : continue</li>
      <li>102 : processing</li>
    </ul>
  </li>
  <li>2xx : successful
    <ul>
      <li>200 : ok</li>
      <li>201 : created</li>
      <li>204 : no content</li>
    </ul>
  </li>
  <li>3xx : redirection
    <ul>
      <li>301 : moved permanently</li>
      <li>302 : found</li>
      <li>303 : see other</li>
      <li>307 : temporary redirect</li>
      <li>308 : permanent redirect</li>
    </ul>
  </li>
  <li>4xx : client error
    <ul>
      <li>400 : bad request</li>
      <li>401 : unauthorized</li>
      <li>403 : forbidden</li>
      <li>404 : not found</li>
      <li>405 : method not allowed</li>
      <li>409 : conflict</li>
    </ul>
  </li>
  <li>5xx : server error
    <ul>
      <li>500 : internal server error</li>
      <li>502 : bad gateway</li>
      <li>503 : service unavailable</li>
    </ul>
  </li>
</ul>

<h2 id="참고">참고</h2>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">MDN</a></p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="HTTP" /><summary type="html"><![CDATA[http? https?]]></summary></entry><entry><title type="html">npm이란</title><link href="http://localhost:4000/til/2023/05/19/npm.html" rel="alternate" type="text/html" title="npm이란" /><published>2023-05-19T00:00:00+09:00</published><updated>2023-05-19T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/05/19/npm</id><content type="html" xml:base="http://localhost:4000/til/2023/05/19/npm.html"><![CDATA[<p>npm : Node Package Manager</p>

<p>npm init : package.json(project에 대한 정보) 생성
npm install [library] : [library] 설치<br />
npm uninstall [library] : [library] 삭제
npm version : (Major).(Minor).(Patch)</p>

<ul>
  <li>Major : 기능의 사용 방식이 변하거나, 기능 대거 추가 및 수정 등이 일어났을 때 업데이트</li>
  <li>Minor : 기능 추가등을 업데이트</li>
  <li>Patch : 출시한 버전에 오류가 발생하거나 사소한 버그로 인해 수정했을 때 업데이트</li>
</ul>

<p>npm list : 설치한 목록
npm list -g : global적으로 설치된 목록
package-lock.json : [library]의 버전과 정보들이 담겨 있다.
npm view [library] : library의 update된 정보들 확인
npm outdated : update가 필요한 [library]들을 보여줌
npm update : update가 필요한 [library]를 전부 update
npm update [library] : [library]를 update
option / –save-dev : devDependencies 개발에 필요한 library를 설치할 때의 옵션 - 제품 자체에 필요한 것이 아닌 개발에 필요한 것임<br />
npm install nodemon –save-dev</p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="Node" /><summary type="html"><![CDATA[npm : Node Package Manager]]></summary></entry><entry><title type="html">Node 소개</title><link href="http://localhost:4000/til/2023/05/17/node.html" rel="alternate" type="text/html" title="Node 소개" /><published>2023-05-17T00:00:00+09:00</published><updated>2023-05-17T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/05/17/node</id><content type="html" xml:base="http://localhost:4000/til/2023/05/17/node.html"><![CDATA[<h2 id="nodejs가-나오게-된-환경">Node.js가 나오게 된 환경</h2>

<h3 id="시간-별-나열">시간 별 나열</h3>

<p>1995년 이전에는 HTML, CSS로 웹사이트를 만듦<br />
1995년 JavaScript 도입 =&gt; 많은 브라우저들이 JS Engine을 탑제하기 시작</p>

<ul>
  <li>Safari : JavaScriptCore</li>
  <li>Internet Explorer : Chakara</li>
  <li>Firefox : SpiderMonkey</li>
  <li>Chrome : V8 - (JIT : Just-In-Time compilation)을 지원</li>
  <li>Edge : V8</li>
</ul>

<p>2009년 Ryan Dahl에 의해 Node.js 탄생 - JavaScript를 브라우저위에서만이 아닌 everywhere에서 사용하기 위함</p>

<h3 id="주요-기술">주요 기술</h3>

<p>V8 Engine?</p>

<ul>
  <li>오픈소스 JavaScript Engine중 하나</li>
  <li>JavaScript와 WebAssembly Engine</li>
  <li>JavaScript를 바이트코드로 컴파일하고 실행하는 방식을 사용</li>
</ul>

<p>WebAssembly?</p>

<ul>
  <li>C나 C++와 같은 프로그래밍 언어를 컴파일해서 어느 브라우저에서나 빠르게 실행되는 형식으로 바꿔주는 기술을 의미</li>
  <li>보통 웹 애플리케이션 개발시에는 JavaScript 프로그래밍 언어를 사용해 동적인 부분을 개발하는데 C나 C++언어들에 비해서는 느리다.</li>
  <li>게임이나 동영상 편집 등과 같은 고성능 웹 애플리케이션을 개발할 때 브라우저의 동작을 빠르게 하기위해서 C나 C++과 같은 언어로 개발할 수 있게 하는 것이다.</li>
  <li>고성능 웹 애플리케이션 개발 시 JavaScript와 같이 사용되고 JavaScript를 대체하는 것이 아닌 보완하는 기술인 것이다.</li>
</ul>

<h2 id="nodejs가-뭔데">Node.js가 뭔데?</h2>

<h4 id="정의">정의</h4>

<p>Node.js®는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임입니다.</p>

<p>“JavaScript everywhere”<br />
브라우저외 서버등에서도 JS를 사용할 수 있도록 하는 JavaScript runtime이다.</p>

<h3 id="runtime이란">runtime이란?</h3>

<p>runtime이란, 프로그래밍 언어가 구동되는 환경을 말한다.<br />
즉 Javascript runtime이란 JavaScript가 구동되는 환경을 말하는 것이다.<br />
JavaScript runtime의 종류는 웹 브라우저(Chrome, Firefox 등등)프로그램과 Node.js가 있다.</p>

<h3 id="nodejs의-특징">Node.js의 특징</h3>

<ol>
  <li>JavaScript Runtime</li>
  <li>Single Thread</li>
  <li>Non-Blocking I/O (Asynchrnous I/O)</li>
  <li>Event-Driven</li>
</ol>

<p>node.js는 single thread라는 특징을 갖고 있다. 즉 main thread, 하나의 thread로 구성되어 있다는 것이며 한번에 하나의 작업만 수행할 수 있다는 것을 의미한다.<br />
그렇다면 어떻게 Non-Blocking I/O, 비동기등과 같은 상반되는 개념들을 갖고 있는 것일까?</p>

<h2 id="동작-원리">동작 원리</h2>

<h3 id="javascript의-동작-원리">JavaScript의 동작 원리</h3>

<p>우선 JavaScript의 동작 원리에 대해 알고 가야한다.
<img width="564" alt="스크린샷 2023-05-24 오후 12 59 41" src="https://github.com/pwsusc10/pwsusc10.github.io/assets/101408068/fe92fbf3-fc21-4b5c-996e-b8079602b875" /></p>

<ol>
  <li>
    <p>JavaScript Runtime은 메모리 힙과 콜 스택으로 구성되어있다.</p>

    <ul>
      <li>메모리 힙 : 메모리를 할당하는 곳</li>
      <li>콜 스택 : 코드가 호출되면서, 스택으로 쌓이는 곳(하나의 메인 스레드에서 호출되는 함수들이 콜 스택에 쌓인다. 함수들은 LIFO(Last-In First_Out)방식으로 처리)</li>
    </ul>
  </li>
  <li>JavaScript Runtime은 자체적으로 비동기를 지원하지 않는다.</li>
  <li>비동기, Non-blocking 처리들은 JavaScript Engine을 구동하는 Runtime 환경(Node.js, 브라우저)에서 담당한다.
    <ul>
      <li>런타임(runtime)과 엔진(Engine)의 관계는 전통적인 컴파일드 언어에서의 링커와 컴파일러의 관계와 같습니다.</li>
    </ul>
  </li>
  <li>즉 JavaScript의 Engine은 단지 코드에 대한 실행환경이며 각 이벤트를 스케줄링하는 것은 그것을 둘러싸고 있는 환경이다. 비동기 작업들도 이러한 환경에서 지원한다.</li>
</ol>

<p><img width="687" alt="스크린샷 2023-05-24 오후 4 46 14" src="https://github.com/pwsusc10/pwsusc10.github.io/assets/101408068/002e167f-38f9-4bd3-a72c-27f01f16bf4f" /></p>

<p>다음 이미지가 바로 JavaScript의 엔진과 외부의 런타임 환결등이 조합된 모습이다.</p>

<ul>
  <li>이벤트 루프: 이벤트 발생 시 호출되는 콜백 함수들을 관리하여 콜백 큐에 전달하고, 콜백 큐에 담겨있는 콜백 함수들을 콜스택에 넘겨줍니다.
    <ul>
      <li>이벤트 루프가 콜백 큐에서 콜스택으로 콜백 함수를 넘겨주는 작업은 콜스택에 쌓여있는 함수가 없을때만 수행됩니다.</li>
    </ul>
  </li>
  <li>콜백 큐: web api에서 비동기 작업들이 실행된 후 호출되는 콜백함수들이 기다리는 공간입니다. 이벤트 루프가 정해준 순서대로 줄을 서있으며, FIFO(First In First Out) 방식을 따릅니다.
    <ul>
      <li>콜백 큐는 하나의 큐로 이루어있지 않습니다. Microtask Queue, Animation Frames 등 여러개의 큐로 이루어져 있습니다. 단, 이 글에서는 이해의 편의를 위해 Callback Queue로 통합하여 명칭합니다.</li>
    </ul>
  </li>
  <li>Web api: Web api는 브라우저에서 자체 지원하는 api입니다. Web api는 Dom 이벤트, Ajax (XmlHttpRequest), setTimeout 등의 비동기 작업들을 수행할 수 있도록 api를 지원합니다.</li>
</ul>

<p>다음은 런타임 환경에서 비동기 코드가 실행되는 과정을 살펴보자.</p>

<p>JS 코드들이 실행될 때, Web api가 지원하는 비동기 작업을 수행하는 코드가 실행된다고 생각해보자. 비동기 작업을 수행하는 코드는 아래의 순서로 실행된다.</p>

<ol>
  <li>먼저 이 코드는 호출스택에 쌓인 후 실행되면, Javascript의 엔진은 비동기 작업을 Web api에게 위임합니다.</li>
  <li>Web api는 해당 비동기 작업을 수행하고 콜백 함수를 이벤트 루프를 통해 태스크 큐에 넘겨주게 됩니다.</li>
  <li>이벤트 루프는 콜스택에 쌓여있는 함수가 없을 때에, 태스크 큐에서 대기하고 있던 콜백함수를 콜스택으로 넘겨줍니다</li>
  <li>콜스택에 쌓인콜백함수가 실행되고, 콜스택에서 제거됩니다.</li>
</ol>

<p>위에서 언급했었던 논블로킹 I/O의 개념이 이 부분을 통해 설명된다.<br />
만약 http 요청의 작업을 동기로 수행했다면 해당 함수가 콜스택에 쌓인채로 머물것이고, JS엔진은 해당 작업이 끝날때까지 어떠한 작업도 수행할 수 없다. 즉, 동기 작업이 다른 코드들을 블로킹한 것이다. 그러나 Javascript는 비동기 작업들을 Web api에게 넘겨줌으로써, 해당 작업이 완료될때까지 다른 코드들을 실행할 수 있다. 이것이 바로 논블로킹이다.</p>

<p>간단한 예시를 통해 확인해보자.</p>

<pre><code class="language-JS">console.log('첫번째로 실행됩니다.');
setTimeout(() =&gt; console.log('최소 1초 후에 실행됩니다.'), 1000);
console.log('언제 실행될까요?');
</code></pre>

<p>출력순서</p>

<pre><code class="language-Terminal">첫번째로 실행됩니다.
언제 실행될까요?
최소 1초 후에 실행됩니다.
</code></pre>

<p>동작 순서</p>

<ol>
  <li>제일 먼저 console.log(‘첫번째로 실행됩니다.’)가 콜스택에 쌓이고, 이는 바로 실행되어 제거됩니다.</li>
  <li>그 다음으로 setTimeout이 콜스택에 쌓입니다. setTimeout이 실행되고, Web api에서 timer가 생성됩니다.
console.log(‘언제 실행될까요?’)가 콜스택에 쌓인 후, 바로 실행되고 제거됩니다.</li>
  <li>Web api에서 생성된 timer는 생성된 시점을 기준으로 최소 1초 후에 태스크 큐로 콜백함수를 전달합니다.</li>
  <li>태스크 큐에 전달되어있던 setTimeout의 콜백함수가 콜스택에 스택이 없는것을 확인한 후, 콜스택에 호출되어 실행됩니다.</li>
</ol>

<h3 id="node-js-동작-원리">Node JS 동작 원리</h3>

<h4 id="node-js">Node JS?</h4>

<p>Node JS는 싱글 스레드 논블로킹 모델입니다. 싱글 스레드지만 비동기 I/O 작업을 통해 요청들을 서로 블로킹하지 않습니다. 즉 동시에 많은 요청들을 비동기로 수행함으로써 싱글 스레드일지라고 논블로킹이 가능합니다. 또한 NodeJS는 클러스터링을 통해 프로세스를 포크하여 멀티스레드 처럼 사용할 수 있습니다. 이는 트래픽에 따라서 프로세스를 포크 할 수 있으므로 서버의 확장성 면에서 용이합니다.</p>

<h4 id="nodejs-는-완전한-싱글-스레드인가">NodeJS 는 완전한 싱글 스레드인가?</h4>

<p>NodeJS는 싱글 스레드이지만 완전한 싱글 스레드를 기반으로 동작하지는 않습니다. 일부 블로킹 작업들은 libuv의 스레드 풀에서 수행되기 때문이죠.</p>

<h4 id="이벤트-기반">이벤트 기반</h4>

<p>이벤트 기반이란 이벤트가 발생할 때 미리 지정해둔 작업을 처리하는 방식입니다. NodeJS는 이벤트 리스너에 등록해둔 콜백 함수를 실행하는 방식으로 동작합니다. 즉 이벤트 루프가 이를 가능하게 해 줍니다.</p>

<p><img width="610" alt="스크린샷 2023-05-24 오후 9 47 07" src="https://github.com/pwsusc10/pwsusc10.github.io/assets/101408068/840fdab5-ba0f-450b-ab05-baf13826ddd7" /></p>

<p>Node JS는 크게 내장 라이브러리, V8 엔진, libuv로 구성되어 있습니다. Node JS의 특성인 이벤트 기반, Non-Blocking I/O 모델등은 모두 libuv 라이브러리에서 구현됩니다.<br />
Node JS에서 작성되는 거의 모든 코드들은 콜백 함수로 이루어져 있는데 이러한 콜백 함수들은 libuv 내에 위치한 이벤트 루프에서 관리 및 처리됩니다. 이벤트 루프는 여러 개의 페이즈 들을 갖고 있으며 해당 페이즈들은 각자만에 큐를 가지고 있습니다. 이벤트 루프는 라운드 로빈 방식으로 노드 프로세스가 종료될 때까지 여러 페이지들을 계속 순회합니다. 페이즈들은 각각의 큐들을 관리하고 각각의 큐는 FIFO 순서로 콜백 함수들을 처리하게 됩니다.</p>

<h4 id="non-blocking-io">Non-blocking I/O</h4>

<p>NodeJS에서 논블로킹 I/O 모델은 Input Output 이 관련된 작업(데이터베이스 CRUD, 파일 시스템) 등의 블로킹 작업들은 백그라운드에서 수행하고 이를 비동기 콜백 함수로 이벤트 루프에 전달하는 것을 의미합니다.</p>

<p><img width="647" alt="스크린샷 2023-05-24 오후 9 52 54" src="https://github.com/pwsusc10/pwsusc10.github.io/assets/101408068/d6f37c44-faf8-497e-b315-b68c24a923f0" /></p>

<p>I/O 작업들은 OS 커널 혹은 libuv 내의 스레드 풀에서 담당하게 됩니다. libuv는 OS 커널에서 어떤 비동기 작업들을 지원해주는지 알고 있기 때문에 작업 종류에 따라서 커널 혹은 스레드 풀로 분기합니다. libuv의 스레드풀은 커널이 지원안하는 작업들을 수행하게 됩니다. 또한 libuv 의 스레드 풀은 멀티 스레드로 이루어져 있습니다. 예를 들어 파일 시스템은 libuv에서 처리되게 되고 스레드 풀도 마찬가지로 작업을 마친 후 이벤트 루프에 콜백 함수를 전달하게 됩니다.</p>

<h4 id="libuv는-어떻게-동작할까">libuv는 어떻게 동작할까?</h4>

<p>NodeJS는 기본적으로 libuv 위에서 동작하여 node 인스턴스가 생성될 때 libuv 에는 스레드 풀이(기본값은 4개의 스레드)가 생성됩니다. libuv는 OS 커널이 어떤 비동기 작업들을 지원해주는지 알고 있기 때문에 libuv의 스레드는 커널이 지원하지 않는 작업들을 수행하게 됩니다.</p>

<h4 id="이벤트-루프의-내부-동작-과정">이벤트 루프의 내부 동작 과정?</h4>

<p>이벤트 루프는 6 phase 들로 구성되어있습니다. 각 phase 들을 FIFO 큐를 가지고 있고 이벤트 루프가 해당 phase를 라운드 로빈 방식으로 순환하면서 실행되게 됩니다.</p>

<p><img width="634" alt="스크린샷 2023-05-24 오후 9 54 50" src="https://github.com/pwsusc10/pwsusc10.github.io/assets/101408068/fc044a9d-c5d5-4b40-84ed-e889e66d5528" /></p>

<h4 id="timers">timers</h4>

<p>setTimeOut(), setIntever() 같은 timer 함수들이 처리가 됩니다.</p>

<h4 id="io-callbacks">I/O callbacks</h4>

<p>클로즈 콜백, 타이머로 스케쥴링된 콜백, setImemediate를 제외한 거의 모든 콜백들이 큐에 놓이게 됩니다.(http, api 호출, db 조회 등)</p>

<h4 id="poll">poll</h4>

<p>poll 큐에 있는 이벤트 콜백들을 처리합니다. 이때 poll에 쌓인 콜백 함수들을 실행하게 되는데 더 이상 실행할 콜백 함수가 없을때에는 규칙에 따라 다음 단계로 넘거가거나 대기하게 됩니다. 일단 check 단계를 검사하여 setImemediate 가 있는지 확인하고 setImemediate 가 있으면 check 단계로 넘어가게 됩니다. 만약 setImemediate 가 없다면 timer 단계에 실행할 timer 함수가 있는지 확인하게 됩니다. timer 단계로 넘어갈 수있을때까지 대기하고 도중에 poll 큐에 콜백함수가 들어온다면 즉시 실행합니다.</p>

<h4 id="check">check</h4>

<p>setImediate() 콜백이 호출되고 실행됩니다.</p>

<h4 id="close-callbacks">close callbacks</h4>

<p>. on(‘close’) 같은 이벤트에 따른 콜백 함수를 실행합니다.</p>

<h4 id="코드-예시">코드 예시</h4>

<pre><code class="language-Node.js">setTimeout(() =&gt; {
  console.log('timeout');
}, 0);

setImmediate(() =&gt; {
  console.log('immediate');
});
</code></pre>

<p>위 코드를 실행하면 setTimeout()는 timer 영어에 들어가고 setimmediate()는 check 영역에 들어가게 됩니다. 이벤트 루프가 돌고 있는 시점에 따라 다르게 되는데 timer 단계라면 setTimeout 이 먼저 실행되고 그렇지 않다면 setImmediate 가 먼저 실행되게 됩니다.</p>

<pre><code class="language-Node.js">const fs = require('fs');

fs.readFile(__filename, () =&gt; {
  setTimeout(() =&gt; {
    console.log('timeout');
  }, 0);
  setImmediate(() =&gt; {
    console.log('immediate');
  });
})
</code></pre>

<p>실행 결과는 다음과 같다.</p>

<pre><code class="language-Terminal">immediate
timeout
</code></pre>

<ol>
  <li>
    <p>fs.readFile 는 블로킹 작업이고 OS 가 지원하지 않는 비동기 작업 이므로 libuv의 스레드 풀에서 담당하게 됩니다.</p>
  </li>
  <li>
    <p>스레드가 작업을 완료한 뒤 I/O callback 영역에 큐에 콜백을 등록합니다.</p>
  </li>
  <li>
    <p>이벤트 루프가 I/O callback 영역을 실행할 때 콜백을 poll 영역에 큐에 등록하게 됩니다.</p>
  </li>
  <li>
    <p>이제 poll 영역을 실행하게 되면서 I/O callback에서 받은 콜백 내부 로직을 실행하게 됩니다. setTimeout 같은 경우는 timer 등록되게 되고 setImmediate 같은 경우는 check 영역에 들어가게 됩니다.</p>
  </li>
  <li>
    <p>이벤트 루프가 큐를 비우고 다음 실행 영역인 check를 확인하게 됩니다. 위에서 말했듯이 check 영역에 실행할 setImmediate 이있기때문에 immediate을 출력하게 됩니다.</p>
  </li>
  <li>
    <p>timers에 등록되었던 setTimeout의 콜백을 poll 큐에 등록하게됩되고 이벤트 루프가 poll 영역을 실행하고 timeout 을 출력하게 됩니다.</p>
  </li>
  <li>
    <p>노드 프로세스가 반환되고 종료됩니다.</p>
  </li>
</ol>

<h2 id="참고">참고</h2>

<p>블로그 - <a href="https://codingjuny.tistory.com/58">Node JS 동작 원리</a></p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="Node" /><summary type="html"><![CDATA[Node.js가 나오게 된 환경]]></summary></entry><entry><title type="html">알고리즘</title><link href="http://localhost:4000/til/2023/03/03/algorithm.html" rel="alternate" type="text/html" title="알고리즘" /><published>2023-03-03T00:00:00+09:00</published><updated>2023-03-03T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/03/03/algorithm</id><content type="html" xml:base="http://localhost:4000/til/2023/03/03/algorithm.html"><![CDATA[<h2 id="알고리즘-평가">알고리즘 평가</h2>

<p>알고리즘 평가하는 요소는 크게 두 가지가 있다.<br />
하나는 ‘속도’에 관한 것이고 다른 하나는 ‘메모리의 사용량’에 관한 것이다.<br />
속도에 해당하는 알고리즘 수행시간 분석결과를 ‘시간 복잡도(time complexity)’<br />
메모리 사용량에 대한 분석 결과를 ‘공간 복잡도(space complexity)’라 한다.</p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="Algorithm" /><summary type="html"><![CDATA[알고리즘 평가]]></summary></entry><entry><title type="html">Stack - 계산기</title><link href="http://localhost:4000/til/2023/02/03/Stack-03.html" rel="alternate" type="text/html" title="Stack - 계산기" /><published>2023-02-03T00:00:00+09:00</published><updated>2023-02-03T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/02/03/Stack-03</id><content type="html" xml:base="http://localhost:4000/til/2023/02/03/Stack-03.html"><![CDATA[<h2 id="수식의-표기법">수식의 표기법</h2>

<p>수식의 표기법에는 세 가지가 있다.</p>

<ul>
  <li>중위 표기법(infix notation) -&gt; 3 + 4 / 7</li>
  <li>전위 표기법(prefix notation) -&gt; + 3 / 4 7</li>
  <li>후위 표기법(postfix notation) -&gt; 3 4 5 / +</li>
</ul>

<p>여기서 중요한 점은 전위 표기법과 후위 표기법의 수식은 연산자의 배치순서에 따라 연산 순서가 결정되기 때문에, 두 표기법의 수식을 계산하기 위해서 연산자의 우선순위를 알 필요가 없고, 소괄호도 삽입되지 않으니 소괄호에 대한 처리도 불필요하다는 점이다.<br />
즉 구현할 계산기는 다음의 과정을 거쳐서 연산을 진행할 계획이다.</p>

<ol>
  <li>중위 표기법의 수식을 후위 표기법의 수식으로 바꾼다.</li>
  <li>후위 표기법으로 바뀐 수식을 꼐산하여 그 결과를 얻는다.</li>
</ol>

<p>중위 표기법의 수식을 후위 표기법의 수식으로 바꾸는 과정은 다음과 같이 정리할 수 있다.</p>

<ol>
  <li>피연산자는 그냥 옮긴다.</li>
  <li>연산자는 스택으로 옮긴다.</li>
  <li>연산자가 스택에 있다면 우선순위를 비교하여 처리방법을 결정한다. - 우선 순위가 낮은 것부터 스택에 쌓아야한다. 나중에 들어온 연산자가 스택에 있는 연산자의 우선순위보다 낮다면 스택에 있는 연산자를 빼고 넣는다. / 사칙연산의 경우 연산자의 우선순위가 동일하다면, 먼저 등장한 연산자가 우선순위가 높다.</li>
  <li>마지막까지 스택에 남아있는 연산자들은 하나씩 꺼내서 옮긴다.</li>
</ol>

<h2 id="중위-표기법을-후위-표기법으로">중위 표기법을 후위 표기법으로</h2>

<h3 id="infixtopostfix-header-file">InfixToPostfix header file</h3>
<pre><code class="language-InfixToPostfix.h">#ifndef __INFIX_TO_POSTFIX_H__
#define __INFIX_TO_POSTFIX_H__

// 중위 표기법을 후위 표기법으로 바꾸는 함수.
void ConvToRPNExp(char exp[]);

#endif
</code></pre>

<h3 id="infixtopostfix-source-file">InfixToPostfix source file</h3>
<pre><code class="language-InfixToPostfix.c">#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include "ListBaseStack.h"

// 연산자의 우선순위를 반환해주는 함수.
int GetOpPrec(char op)
{
  switch(op)
  {
    case '*':
    case '/':
      return 5;

    case '+':
    case '-':
      return 3;

    case '(':
      return 1;
  }

  return -1;
}

// 두 연산자의 우선순위를 비교해주는 함수.
int WhoPrecOp(char op1, char op2)
{
  int op1Prec = GetOpPrec(op1);
  int op2Prec = GetOpPrec(op2);

  if(op1Prec &gt; op2Prec)
    return 1;
  else if(op1Prec &lt; op2Prec)
    return -1;
  else
    return 0;
}

void ConvToRPNExp(char exp[])
{
  Stack stack;
  int expLen = strlen(exp);
  char *convExp = (char*)malloc(expLen + 1);
  
  int idx = 0;
  char tok, popOp;

  memset(convExp, 0, sizeof(char)*expLen + 1);
  StackInit(&amp;stack);

  for(int i = 0; i &lt; expLen; i++)
  {
    tok = exp[i];
    if(isdigit(tok))  // 피연산자라면 그대로 옮기기
      convExp[idx++] = tok;
    else
    {
      switch(tok)
      {
        case '(':
          SPush(&amp;stack, tok);
          break;
        case ')':
          while(1)    // ')'가 나왔다면 괄호로 쌓인 연산자 변환식에 옮기기.
          {
            popOp = SPop(&amp;stack);
            if(popOp == '(')
              break;
            convExp[idx++] = popOp;
          }
          break;
        case '+':
        case '-':
        case '*':
        case '/':
          while(!SIsEmpty(&amp;stack) &amp;&amp; (WhoPrecOp(SPeek(&amp;stack), tok) &gt;= 0))
            convExp[idx++] = SPop(&amp;stack);
            
          SPush(&amp;stack, tok);
          break;
      }
    }
  }

  // 스택에 쌓인 연산자 변환하는 식에 넣기.
  while(!SIsEmpty(&amp;stack))
    convExp[idx++] = SPop(&amp;stack);

  // 변환된 후위 표기식 복사하기
  strcpy(exp, convExp);
  free(convExp);
}
</code></pre>

<h3 id="infixtopostfixmainc">InfixToPostfixMain.c</h3>
<pre><code class="language-InfixToPostfixMain.c">#include &lt;stdio.h&gt;
#include "InfixToPostfix.h"

int main(void)
{
  char exp1[] = "1+2*3";
  char exp2[] = "(1+2)*3";
  char exp3[] = "((1+2)+3)*(5-2)";

  ConvToRPNExp(exp1);
  ConvToRPNExp(exp2);
  ConvToRPNExp(exp3);

  printf("%s\n", exp1);
  printf("%s\n", exp2);
  printf("%s\n", exp3);

  return 0;
}
</code></pre>

<h2 id="후위-표기법으로-계산하기">후위 표기법으로 계산하기</h2>
<p>계산 방법 : 후위 표기법을 읽다가 연산자가 나온다면 앞의 두 피연산자를 계산.
ex) 1 2 3 * + = 1 6 + = 7<br />
따라서 연산 과정을 다음과 같이 정리할 수 있다.</p>
<ol>
  <li>후위 표기법으로 표현된 식을 앞에서 부터 읽어 스택에 저장.</li>
  <li>하나씩 저장하다 연산자를 만나면 스택에 저장되어 있는 피연산자 두개를 꺼내 연산후 다시 스택에 저장.</li>
  <li>표현식을 다 읽을 때까지 1,2를 반복.</li>
</ol>

<h3 id="postcalcular-header-file">PostCalcular header file</h3>
<pre><code class="language-PostCalcular.h">#ifndef __POST_CALCULAR_H__
#define __POST_CALCULAR_H__

// 표현식을 인자로 넣으면 계산 값을 반환.
int EvalRPNExp(char exp[]);

#endif
</code></pre>

<h3 id="postcalcular-source-file">PostCalcular source file</h3>
<pre><code class="language-PostCalcular.c">#include &lt;string.h&gt;
#include &lt;ctype.h&gt;
#include "ListBaseStack.h"

int EvalRPNExp(char exp[])
{
    Stack stack;
    int expLen = strlen(exp);
    char tok, op1, op2;

    StackInit(&amp;stack);

    for(int i = 0; i &lt; expLen; i++)
    {
        tok = exp[i];

        if(isdigit(tok))
            SPush(&amp;stack, tok - '0');
        else
        {
            op2 = SPop(&amp;stack);
            op1 = SPop(&amp;stack);

            switch(tok)
            {
                case '+':
                    SPush(&amp;stack, op1 + op2);
                    break;
                case '-':
                    SPush(&amp;stack, op1 - op2);
                    break;
                case '*':
                    SPush(&amp;stack, op1 * op2);
                    break;
                case '/':
                    SPush(&amp;stack, op1 / op2);
                    break;
            }
        }
    }

    return SPop(&amp;stack);
}
</code></pre>

<h3 id="postcalcularmainc">PostCalcularMain.c</h3>
<pre><code class="language-PostCalcularMain.c">#include &lt;stdio.h&gt;
#include "ListBaseStack.h"
#include "PostCalcular.h"

int main(void)
{
    char *exp1 = "123*+";
    char *exp2 = "12+3*";
    char *exp3 = "12+3+52-*";

    printf("%s = %d\n", exp1, EvalRPNExp(exp1));
    printf("%s = %d\n", exp1, EvalRPNExp(exp2));
    printf("%s = %d\n", exp1, EvalRPNExp(exp3));

    return 0;
}
</code></pre>

<h2 id="합치기">합치기</h2>
<p>InfixToPostfix.h와 PostCalculator.h을 합쳐 InfixCalculator로 만들고 실행시켜보자</p>

<h3 id="infixcalculatorh">InfixCalculator.h</h3>

<pre><code class="language-InfixCalculator.h">#ifndef __INFIX_CALCULATOR_H__
#define __INFIX_CALCULATOR_H__

// 중위 표기법 표현식을 넣으면 값 반환
int EvalInfixExp(char exp[]);

#endif
</code></pre>

<h3 id="infixcalculatorc">InfixCalculator.c</h3>
<pre><code class="language-InfixCalculator.c">#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include "InfixToPostfix.h"
#include "PostCalcular.h"

int EvalInfixExp(char exp[])
{
    int strLen = strlen(exp);
    int result;
    char *expcpy = (char*)malloc((strLen + 1)*sizeof(char));

    strcpy(expcpy, exp);

    ConvToRPNExp(expcpy);

    result = EvalRPNExp(expcpy);

    free(expcpy);

    return result;
}
</code></pre>

<h3 id="infixcalculatormainc">InfixCalculatorMain.c</h3>
<pre><code class="language-InfixCalculatorMain.c">#include &lt;stdio.h&gt;
#include "InfixCalculator.h"

int main(void)
{
    char exp1[] = "1+2*3";
    char exp2[] = "(1+2)*3";
    char exp3[] = "((1-2)+3)*(5-2)";

    printf("%s = %d\n", exp1, EvalInfixExp(exp1));
    printf("%s = %d\n", exp2, EvalInfixExp(exp2));
    printf("%s = %d\n", exp3, EvalInfixExp(exp3));

    return 0;
}
</code></pre>

<h2 id="참고-자료">참고 자료</h2>

<p>책 - 윤성우의 열혈 자료 구조</p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="Data Structure" /><summary type="html"><![CDATA[수식의 표기법]]></summary></entry><entry><title type="html">Stack - 리스트 기반</title><link href="http://localhost:4000/til/2023/02/02/Stack-02.html" rel="alternate" type="text/html" title="Stack - 리스트 기반" /><published>2023-02-02T00:00:00+09:00</published><updated>2023-02-02T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/02/02/Stack-02</id><content type="html" xml:base="http://localhost:4000/til/2023/02/02/Stack-02.html"><![CDATA[<h2 id="연결-리스트-기반-stack">연결 리스트 기반 Stack</h2>

<p>스택도 연결 리스트이다. 다만 저장된 순서의 역순으로 조회(삭제)가 가능한 연결 리스트일 뿐이다.<br />
우리는 연결리스트를 head만 있는 연결리스트와 head와 tail 둘 다 있는 연결리스트를 만들 수 있다.<br />
여기서 주목할 점은 head만 있는 연결리스트는 stack의 구조와 유사하다는 점이다.<br />
즉 새로운 노드를 꼬리가 아닌 머리에 추가하는 형태로 구현한 연결 리스트가 스택의 구조와 매우 유사한 성격을 지닌다.</p>

<h3 id="adt">ADT</h3>

<p>list기반 Stack의 ADT 또한 배열기반 Stack의 ADT와 동일하다.</p>

<pre><code class="language-ADT">void StackInit(Stack *pstack);
- 스택의 초기화를 진행한다.
- 스택 생성 후 가장 먼저 호출되어야 한다.

int SIsEmpty(Stack *pstack);
- 스택이 빈 경우 TRUE(1)을, 그렇지 않은 경우 FALSE(0)을 반환한다.

void SPush(Stack *pstack, Data data);
- 스택에 데이터를 저장한다. 매개변수 data로 전달된 값을 저장한다.

Data SPop(Stack *pstack);
- 마지막에 저장된 요소를 삭제한다.
- 삭제된 데이터는 반환이 된다.
- 본 함수의 호출을 위해서는 데이터가 하나 이상 존재해야한다.

Data SPeek(Stack *pstack);
- 마지막에 저장된 요소를 반환하되 삭제하지 않는다.
- 본 함수의 호출을 위해서는 데이터가 하나 이상 존재해야한다.
</code></pre>

<h3 id="header-file">header file</h3>

<p>list 기반 Stack을 구현하기 위해서 필요한 것은 포인터 변수 head하나이므로 이를 헤더파일로 정의하면 다음과 같다.</p>

<pre><code class="language-ListBaseStack.h">#ifndef __LB_STACK_H__
#define __LB_STACK_H__

#define TRUE 1
#define FALSE 0
#define STACK_LEN 100

typedef int Data;

typedef struct _node
{
  Data data;
  struct _node *next;
} Node;

typedef struct _listStack
{
  Node *head;
}ListStack;

typedef ListStack Stack;

void StackInit(Stack *pstack);          // 스택의 초기화
int SIsEmpty(Stack *pstack);            // 스택이 비었는지 확인

void SPush(Stack *pstack, Data data);   // 스택의 push연산
Data SPop(Stack *pstack);               // 스택의 pop연산
Data SPeek(Stack *pstack);              // 스택의 peek연산


#endif
</code></pre>

<h3 id="source-file">source file</h3>

<pre><code class="language-ListBaseStack.c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "ListBaseStack.h"

void StackInit(Stack *pstack)
{
  pstack-&gt;head = NULL;
}

int SIsEmpty(Stack *pstack)
{
  if(pstack-&gt;head == NULL)
    return TRUE;
  else
    return FALSE;
}

void SPush(Stack *pstack, Data data)
{
  // 새로운 노드 생성 및 데이터 저장.
  Node *newNode = (Node*)malloc(sizeof(Node));
  newNode-&gt;data = data;

  newNode-&gt;next = pstack-&gt;head;
  pstack-&gt;head = newNode;
}

Data SPop(Stack *pstack)
{
  Node *delNode;
  Data delData;

  if(SIsEmpty(pstack))
  {
    printf("Stack Memory Error!\n");
    exit(-1);
  }

  delNode = pstack-&gt;head;
  delData = delNode-&gt;data;

  pstack-&gt;head = pstack-&gt;head-&gt;next;

  free(delNode);

  return delData;
}

Data SPeek(Stack *pstack)
{
  if(SIsEmpty(pstack))
  {
    printf("Stack Memory Error!\n");
    exit(-1);
  }

  return pstack-&gt;head-&gt;data;
}
</code></pre>

<h3 id="mainc">main.c</h3>

<pre><code class="language-ListBaseStackMain.c">#include &lt;stdio.h&gt;
#include "ListBaseStack.h"

int main(void)
{
  // Stack의 생성 및 초기화
  Stack stack;
  StackInit(&amp;stack);

  // 데이터 저장
  SPush(&amp;stack, 11);
  SPush(&amp;stack, 22);
  SPush(&amp;stack, 33);
  SPush(&amp;stack, 44);
  SPush(&amp;stack, 55);

  // 데이터 꺼내기
  while(!SIsEmpty(&amp;stack))
  {
    printf("%d ", SPop(&amp;stack));
  }

  return 0;
}
</code></pre>

<h2 id="참고-자료">참고 자료</h2>

<p>책 - 윤성우의 열혈 자료 구조</p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="Data Structure" /><summary type="html"><![CDATA[연결 리스트 기반 Stack]]></summary></entry><entry><title type="html">Stack - 배열 기반</title><link href="http://localhost:4000/til/2023/02/01/Stack-01.html" rel="alternate" type="text/html" title="Stack - 배열 기반" /><published>2023-02-01T00:00:00+09:00</published><updated>2023-02-01T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/02/01/Stack-01</id><content type="html" xml:base="http://localhost:4000/til/2023/02/01/Stack-01.html"><![CDATA[<h2 id="stack">Stack</h2>

<p>스택의 구조는 매우 간단하다. 스택은 쟁반 위에 쌓인 접시라고 생각하면 이해하기 쉽다. 쟁반 위에 쌓인 접시는 가장 먼저 쌓은 접시는 맨 밑에 가장 늦게 쌓은 접시는 가장 위에 놓여 있으며, 접시를 뺄 때에는 가장 늦게 쌓인 접시가 제일 먼저 뺄 수 있다는 것을 알 수 있다. 이처럼 스택은 ‘LIFO(Last-In, First-Out) 구조의 자료 구조이다. 즉 후입선출 방식의 자료구조를 뜻한다는 말이다.</p>

<h3 id="adt">ADT</h3>

<p>Stack의 ADT는 다음과 같다.</p>

<pre><code class="language-ADT">void StackInit(Stack *pstack);
- 스택의 초기화를 진행한다.
- 스택 생성 후 가장 먼저 호출되어야 한다.

int SIsEmpty(Stack *pstack);
- 스택이 빈 경우 TRUE(1)을, 그렇지 않은 경우 FALSE(0)을 반환한다.

void SPush(Stack *pstack, Data data);
- 스택에 데이터를 저장한다. 매개변수 data로 전달된 값을 저장한다.

Data SPop(Stack *pstack);
- 마지막에 저장된 요소를 삭제한다.
- 삭제된 데이터는 반환이 된다.
- 본 함수의 호출을 위해서는 데이터가 하나 이상 존재해야한다.

Data SPeek(Stack *pstack);
- 마지막에 저장된 요소를 반환하되 삭제하지 않는다.
- 본 함수의 호출을 위해서는 데이터가 하나 이상 존재해야한다.
</code></pre>

<h3 id="header-file">header file</h3>

<p><img width="739" alt="ArrayBaseStack" src="https://user-images.githubusercontent.com/101408068/226134286-b93c7b13-ba2b-4e0f-971f-cdf14970730b.png" />&lt;/img&gt;
위 그림에서 주목해야 할 것은 두 가지이다.</p>

<ul>
  <li>인데스 0의 배열 요소가 ‘스택의 바닥’으로 정의되어 있다.</li>
  <li>마지막에 저장된 데이터의 위치를 기억해야 한다.(TOP)</li>
</ul>

<p>인데스 0의 배열 요소를 스택의 바닥으로 두어 배열의 길이에 상관 없이 언제나 인덱스 0의 요소가 스택의 바닥이 된다.<br />
스택의 핵심 연산 두 가지는 다음과 같다.</p>

<ul>
  <li>push : Top을 위로 한 칸 올리고, Top이 가리키는 위치에 데이터 저장</li>
  <li>pop : Top이 가리키는 데이터를 반환하고, Top을 아래로 한 칸 내림</li>
</ul>

<pre><code class="language-ArrayBaseStack.h">#ifndef __AB_STACK_H__
#define __AB_STACK_H__

#define TRUE 1
#define FALSE 0
#define STACK_LEN 100

typedef int Data;

typedef struct _arrayStack
{
  Data stackArr[STACK_LEN];
  int topIndex;
} ArrayStack;

typedef ArrayStack Stack;

void StackInit(Stack *pstack);          // 스택의 초기화
int SIsEmpty(Stack *pstack);            // 스택이 비었는지 확인

void SPush(Stack *pstack, Data data);   // 스택의 push연산
Data SPop(Stack *pstack);               // 스택의 pop연산
Data SPeek(Stack *pstack);              // 스택의 peek연산


#endif
</code></pre>

<h3 id="source-file">source file</h3>

<pre><code class="language-ArrayBaseStack.c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "ArrayBaseStack.h"

void StackInit(Stack *pstack)
{
  pstack-&gt;topIndex = -1;        // -1은 빈 상태를 의미한다.
}

int SIsEmpty(Stack *pstack)
{
  if(pstack-&gt;topIndex == -1)
    return TRUE;
  else
    return FALSE;
}

void SPush(Stack *pstack, Data data)
{
  pstack-&gt;topIndex++;
  pstack-&gt;stackArr[pstack-&gt;topIndex] = data;
}

Data SPop(Stack *pstack)
{
  int delIndex;

  if(SIsEmpty(pstack))                  // Stack이 비어있다면
  {
    printf("Stack Memory Error!\n");
    exit(-1);
  }

  delIndex = pstack-&gt;topIndex;          // 삭제할 index값 저장
  pstack-&gt;topIndex--;                   // pop 연산으로 인해 topIndex 값 하나 감소

  return pstack-&gt;stackArr[delIndex];    // 삭제되는 데이터 반환
}

Data SPeek(Stack *pstack)
{
  if(SIsEmpty(pstack))
  {
    printf("Stack Memory Error!\n");
    exit(-1);
  }

  return pstack-&gt;stackArr[pstack-&gt;topIndex];
}
</code></pre>

<h3 id="mainc">main.c</h3>

<pre><code class="language-ArrayBaseStackMain.c">#include &lt;stdio.h&gt;
#include "ArrayBaseStack.h"

int main(void)
{
  // Stack의 생성 및 초기화
  Stack stack;
  StackInit(&amp;stack);

  // 데이터 저장
  SPush(&amp;stack, 11);
  SPush(&amp;stack, 22);
  SPush(&amp;stack, 33);
  SPush(&amp;stack, 44);
  SPush(&amp;stack, 55);

  // 데이터 꺼내기
  while(!SIsEmpty(&amp;stack))
  {
    printf("%d ", SPop(&amp;stack));
  }

  return 0;
}
</code></pre>

<h2 id="참고-자료">참고 자료</h2>

<p>책 - 윤성우의 열혈 자료 구조<br />
블로그 - <a href="https://hellmath.tistory.com/7">스택의 개념, 배열로 스택구현</a></p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="Data Structure" /><summary type="html"><![CDATA[Stack]]></summary></entry><entry><title type="html">리스트 - 5</title><link href="http://localhost:4000/til/2023/01/31/Linked-List-05.html" rel="alternate" type="text/html" title="리스트 - 5" /><published>2023-01-31T00:00:00+09:00</published><updated>2023-01-31T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/01/31/Linked-List-05</id><content type="html" xml:base="http://localhost:4000/til/2023/01/31/Linked-List-05.html"><![CDATA[<h2 id="양방향-연결-리스트---headdummynode와-taildummynode가-있는-것">양방향 연결 리스트 - headDummyNode와 tailDummyNode가 있는 것</h2>

<ul>
  <li>장점
    <ul>
      <li>DummyNode를 head와 tail에 추가함으로써 삭제와 조회의 일관성을 더한다.</li>
    </ul>
  </li>
</ul>

<h3 id="adt">ADT</h3>

<pre><code class="language-ADT">void List Init(List *plist);
- 리스트 초기화

void LInsert(List *plist, LData pdata);
- 리스트에 데이터 저장

int LFirst(List *plist, LData pdata);
- 첫 번째 데이터를 pdata에 저장
- 참조 성공 시 TRUE(1), 실패 시 FALSE(0)을 반환

int LNext(List *plist, LData *pdata);
- 참조된 데이터의 다음 데이터를 pdata에 저장
- 참조를 새로 시작하기 위해선 LFirst 함수를 호출해야 한다.
- 참조 성공 시 TRUE(1), 실패 시 FALSE(0)을 반환

LData LRemove(List *plist);
- LFirst 또는 LNext 함수의 마지막 반환 데이터를 삭제
- 삭제된 데이터를 반환

int LCount(List *plist);
- 리스트에 저장되어 있는 데이터의 수 반환
</code></pre>

<h3 id="header-file">header file</h3>

<pre><code class="language-DBLinkedList.h">#ifndef __DB_LINKED_LIST_H__
#define __DB_LINKED_LIST_H__

#define TRUE 1
#define FALSE 0

typedef int Data;

typedef struct _node
{
  Data data;
  struct _node *prev;
  struct _node *next;
}Node;

typedef struct _DLinkedList
{
  Node *head;
  Node *tail;
  Node *cur;
  int numOfData;

}DBLinkedList;

typedef DBLinkedList List;

void ListInit(List *plist);                 // 초기화
void LInsert(List *plist, Data data);       // 머리에 데이터 저장

int LFirst(List *plist, Data *pdata);       // 첫 데이터 참조
int LNext(List *plist, Data *pdata);        // 두 번째 이후 데이터 참조

Data LRemove(List *plist);                  // 참조한 데이터 삭제
int LCount(List *plist);                    // 저장된 데이터의 수 반환


#endif
</code></pre>

<h3 id="source-file">source file</h3>

<pre><code class="language-DBLinkedList.c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "DBLinkedList.h"

void ListInit(List *plist)
{
  Node *headDummy = (Node*)malloc(sizeof(Node));
  Node *tailDummy = (Node*)malloc(sizeof(Node));

  // headDummy 연결.
  headDummy-&gt;prev = NULL;
  headDummy-&gt;next = tailDummy;
  plist-&gt;head = headDummy;

  // tailDummy 연결
  tailDummy-&gt;prev = headDummy;
  tailDummy-&gt;next = NULL;
  plist-&gt;tail = tailDummy;

  plist-&gt;numOfData = 0;
}

void LInsert(List *plist, Data data)
{
  // 저장할 노드 생성
  Node *newNode = (Node*)malloc(sizeof(Node));
  newNode-&gt;data = data;

  // newNode와 다음 Node 연결
  newNode-&gt;next = plist-&gt;head-&gt;next;
  plist-&gt;head-&gt;next-&gt;prev = newNode;

  // headDummy와 newNode 연결
  newNode-&gt;prev = plist-&gt;head;
  plist-&gt;head-&gt;next = newNode;

  plist-&gt;numOfData++;
}

int LFirst(List *plist, Data *pdata)
{
  if(plist-&gt;head-&gt;next == plist-&gt;tail)
    return FALSE;

  plist-&gt;cur = plist-&gt;head-&gt;next;
  *pdata = plist-&gt;cur-&gt;data;

  return TRUE;
}

int LNext(List *plist, Data *pdata)
{
  if(plist-&gt;cur-&gt;next == plist-&gt;tail)
    return FALSE;

  plist-&gt;cur = plist-&gt;cur-&gt;next;
  *pdata = plist-&gt;cur-&gt;data;

  return TRUE;
}

Data LRemove(List *plist)
{
  Node *delNode;
  Data delData;

  delNode = plist-&gt;cur;
  delData = delNode-&gt;data;

  delNode-&gt;prev-&gt;next = delNode-&gt;next;
  delNode-&gt;next-&gt;prev = delNode-&gt;prev;
  plist-&gt;cur = delNode-&gt;prev;
  free(delNode);

  plist-&gt;numOfData--;

  return delData;
}

int LCount(List *plist)
{
  return plist-&gt;numOfData;
}
</code></pre>

<h3 id="mainc">main.c</h3>

<pre><code class="language-DBLinkedListMain.c">#include &lt;stdio.h&gt;
#include "DBLinkedList.h"

int main(void)
{
  List list;
  Data data;

  ListInit(&amp;list);

  LInsert(&amp;list, 11);
  LInsert(&amp;list, 22);
  LInsert(&amp;list, 33);
  LInsert(&amp;list, 44);
  LInsert(&amp;list, 55);

  printf("저장된 데이터 수 : %d\n", LCount(&amp;list));

  if(LFirst(&amp;list, &amp;data))
  {
    printf("data : %d\n", data);

    while(LNext(&amp;list, &amp;data))
    {
      printf("data : %d\n", data);
    }
  }

  if(LFirst(&amp;list, &amp;data))
  {
    if(data == 11 || data == 33 || data == 55)
    {
      printf("삭제된 데이터 : %d\n", LRemove(&amp;list));
    }

    while(LNext(&amp;list, &amp;data))
    {
      if(data == 11 || data == 33 || data == 55)
        printf("삭제된 데이터 : %d\n", LRemove(&amp;list));
    }
  }


  if(LFirst(&amp;list, &amp;data))
  {
    printf("data : %d\n", data);

    while(LNext(&amp;list, &amp;data))
    {
      printf("data : %d\n", data);
    }
  }

  printf("저장된 데이터 수 : %d\n", LCount(&amp;list));

  return 0;
}
</code></pre>

<h2 id="참고-자료">참고 자료</h2>

<p>책 - 윤성우의 열혈 자료 구조</p>]]></content><author><name>pwsusc10</name></author><category term="TIL" /><category term="TIL" /><category term="Data Structure" /><summary type="html"><![CDATA[양방향 연결 리스트 - headDummyNode와 tailDummyNode가 있는 것]]></summary></entry></feed>